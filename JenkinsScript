pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'despliegue-aplicacion'   // Nombre de la imagen Docker
        DOCKER_PORT = '9090'                     // Puerto donde la app se ejecuta
        REPO_URL = 'https://github.com/GalicianNyx/TestProyecto.git'  // URL del repositorio
    }

    stages {
        stage('Clonar Repositorio') {
            steps {
                script {
                    echo 'Clonando el repositorio desde GitHub...'
                }
                git branch: 'main', 
                    url: "${REPO_URL}"
            }
        }

        stage('Construir Imagen Docker') {
            steps {
                script {
                    echo 'Construyendo la imagen Docker...'
                    // Construir la imagen Docker a partir del Dockerfile
                    sh '''
                        docker build -t ${DOCKER_IMAGE} .
                    '''
                }
            }
        }

        stage('Ejecutar Contenedor Docker') {
            steps {
                script {
                    echo 'Ejecutando el contenedor Docker con la aplicación...'
                    // Ejecutar el contenedor Docker en segundo plano, mapeando el puerto 9090
                    sh '''
                        docker run -d -p ${DOCKER_PORT}:80 ${DOCKER_IMAGE}
                    '''
                }
            }
        }

        stage('Análisis de Vulnerabilidades con OWASP ZAP') {
            steps {
                script {
                    echo 'Ejecutando escaneo con OWASP ZAP...'
                    // Realizar el análisis de seguridad con OWASP ZAP apuntando al contenedor
                    sh '''
                        zap-cli quick-scan --self-contained http://localhost:${DOCKER_PORT}
                    '''
                }
            }
        }

        stage('Notificar Resultado') {
            steps {
                script {
                    echo 'Notificación: Pipeline finalizado.'
                }
            }
        }
    }

    post {
        always {
            echo 'Limpieza: Deteniendo y eliminando el contenedor Docker.'
            // Detener y eliminar el contenedor Docker después de la ejecución
            sh '''
                docker ps -q -f "ancestor=${DOCKER_IMAGE}" | xargs -I {} docker stop {} || true
                docker ps -a -q -f "ancestor=${DOCKER_IMAGE}" | xargs -I {} docker rm {} || true
            '''
        }
    }
}
