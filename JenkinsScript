pipeline {
    agent any
    environment {
        GIT_REPO = 'https://github.com/GalicianNyx/TestProyecto'
        GIT_CREDENTIALS_ID = '' 
        SONARQUBE_SERVER = 'Sonar' 
        OWASP_API_KEY = '7f3984g82f5ian3a3hu5754pbi'
        ZAP_SERVER_URL = 'http://192.168.1.101:8080' 
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', 
                    credentialsId: "${GIT_CREDENTIALS_ID}", 
                    url: "${GIT_REPO}"
            }
        }
        stage('SonarQube Analysis') {
            environment {
                SONAR_TOKEN = credentials('Sonar-Token')
            }
            steps {
                script {
                    echo 'Ejecutando análisis de SonarQube...'
                    sh """
                    sonar-scanner \
                        -Dsonar.projectKey=TestProyecto \
                        -Dsonar.host.url=http://192.168.1.101:9000 \
                        -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }
        stage('OWASP ZAP Security Scan') {
            steps {
                script {
                    echo 'Ejecutando análisis de seguridad con OWASP ZAP...'
                    sh """
                    curl -X POST "${ZAP_SERVER_URL}/JSON/ascan/action/scan/?url=https://<TU_SITIO_WEB>" \
                        -H "X-ZAP-API-Key: ${OWASP_API_KEY}"
                    """
                }
            }
        }
        stage('Results') {
            steps {
                script {
                    echo 'Pipeline completado con éxito. Revisa los resultados en Jenkins, SonarQube y OWASP ZAP.'
                }
            }
        }
    }
    post {
        always {
            echo 'Limpieza del workspace...'
            cleanWs() 
        }
        success {
            echo 'Pipeline ejecutado con éxito.'
        }
        failure {
            echo 'El pipeline ha fallado. Revisa los errores.'
        }
    }
}
