pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'despliegue-aplicacion'   // Nombre de la imagen Docker
        DOCKER_PORT = '9090'                     // Puerto donde la app se ejecuta
        REPO_URL = 'https://github.com/GalicianNyx/TestProyecto.git'  // URL del repositorio
        SONARQUBE_URL = 'http://192.168.1.101:9000' // URL del servidor SonarQube
        SONARQUBE_CREDENTIALS = 'sqa_7fb62898f900b70204fe7fd8b5fba84c3263d321' // Token de autenticación de SonarQube
    }

    stages {
        stage('Clonar Repositorio') {
            steps {
                script {
                    echo 'Clonando el repositorio desde GitHub...'
                }
                git branch: 'main', 
                    url: "${REPO_URL}"
            }
        }

        stage('Análisis de Código con SonarQube') {
            steps {
                script {
                    echo 'Ejecutando análisis de SonarQube...'
                }
                withSonarQubeEnv('Sonar') {
                    sh '''
                        export PATH=$PATH:/opt/sonarscanner/sonar-scanner-6.2.1.4610-linux-x64/bin && 
                        sonar-scanner -Dsonar.projectKey=TestProyecto \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.login=${SONARQUBE_CREDENTIALS}
                    '''
                }
            }
        }

        stage('Construir Imagen Docker') {
            steps {
                script {
                    echo 'Construyendo la imagen Docker...'
                    // Ejecutar el comando Docker para construir la imagen con sudo
                    sh '''
                        sudo docker build -t ${DOCKER_IMAGE} .
                    '''
                }
            }
        }

        stage('Ejecutar Contenedor Docker') {
            steps {
                script {
                    echo 'Ejecutando el contenedor Docker con la aplicación...'
                    // Ejecutar el contenedor Docker en el puerto 9090 con sudo
                    sh '''
                        sudo docker run -d -p ${DOCKER_PORT}:80 ${DOCKER_IMAGE}
                    '''
                }
            }
        }

        stage('Análisis de Vulnerabilidades con OWASP ZAP') {
            steps {
                script {
                    echo 'Ejecutando escaneo con OWASP ZAP...'
                    // Ejecutar el escaneo con OWASP ZAP apuntando al contenedor que corre en el puerto 9090
                    sh '''
                        zap-cli quick-scan --self-contained http://localhost:${DOCKER_PORT}
                    '''
                }
            }
        }

        stage('Notificar Resultado') {
            steps {
                script {
                    echo 'Notificación: Pipeline finalizado.'
                }
            }
        }
    }

    post {
        always {
            echo 'Limpieza: Deteniendo y eliminando el contenedor Docker.'
            // Detener y eliminar el contenedor Docker después de la ejecución con sudo
            sh '''
                sudo docker ps -q -f "ancestor=${DOCKER_IMAGE}" | xargs -I {} sudo docker stop {} || true
                sudo docker ps -a -q -f "ancestor=${DOCKER_IMAGE}" | xargs -I {} sudo docker rm {} || true
            '''
        }
    }
}
